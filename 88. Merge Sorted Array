class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {       
     
        //双指针的问题。变形过程：
        //123006 -> 123056 -> 123356 ->122356
        //当B小,A大的时候就是例子。 a: 456000. b：123 -> 456006 ->456056 -> 456456 -> 453456->423456 ->123456 这个边界条件也要考虑
        int k = m + n - 1;
        int a = m - 1, b = n - 1;
        while(a >= 0 && b >=0){
            if(nums1[a] > nums2[b]){
                nums1[k] = nums1[a];
                a--;
                k--;
            }else{
                nums1[k] = nums2[b];
                b--;
                k--;
            }
        }
        //注意的是nums2的值还是需要继续遍历的。当num1的值结束后。corner case: nums1:[0]
        //                                                                nums2:[1]
        while(b >= 0){
                nums1[k] = nums2[b];//当所有的b的值小于a的值时候。只要把nums2的值放入nums1[k]中就可以了。
                b--;
                k--;    
        }
      /*
      int i=m-1,j=n-1;
        int k=(m+n-1);
        for(;k>=0&&j>=0&&i>=0;k--)
        {
            if(nums2[j]>nums1[i])
            {
                nums1[k]=nums2[j];
                    j--;
            }else
            {
                nums1[k]=nums1[i];
                i--;
            }
        }
        if(j>=0 )
        {
            for(;k>=0;k--)
            {
                nums1[k]=nums2[j];
                j--;
            }
        }
      */
        /*利用PQ nlog(n)
        PriorityQueue <Integer> q = new PriorityQueue<>();
		for(int i=0;i<m;i++)
		{
			q.add(nums1[i]);
		}

		for(int i=0;i<n;i++)
		{
			q.add(nums2[i]);
		}

		int i = 0;
		while(!q.isEmpty())
		{
			nums1[i++] = q.poll();
		}
        */
    }
}
